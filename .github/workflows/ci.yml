name: Tanin CI/CD pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --only main --no-root

      - name: Cache Poetry venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Init database
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: tanin database init

      - name: Run test
        run: poetry run pytest

      - name: Run linter
        run: poetry run ruff check .

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          echo "image-tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/tanin:latest
            ghcr.io/${{ github.repository_owner }}/tanin:${{ github.sha }}

#      - name: Build image
#        run: |
#          echo "Build Docker image"
#          IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
#          IMAGE_ID=${{ env.REGISTRY }}/$IMAGE_NAME_LOWER
#
#          echo "Building and tagging image: $IMAGE_ID:${{ steps.set-tag.outputs.image-tag }} and $IMAGE_ID:latest"
#
#          docker build \
#            -t $IMAGE_ID:${{ steps.set-tag.outputs.image-tag }} \
#            -t $IMAGE_ID:latest \
#            .
#
#          echo "Pushing images to registry..."
#          docker push "$IMAGE_ID:${{ steps.set-tag.outputs.image-tag }}"
#          docker push "$IMAGE_ID:latest"

